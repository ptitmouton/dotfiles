return {
	"neovim/nvim-lspconfig",
	event = { "BufReadPre", "BufNewFile" },
	dependencies = {
		"hrsh7th/cmp-nvim-lsp",
		{ "antosha417/nvim-lsp-file-operations", config = true },
		{ "folke/neodev.nvim", opts = {} },
	},
	config = function()
		local lspconfig = require("lspconfig")
		local mason_lspconfig = require("mason-lspconfig")
		local cmp_nvim_lsp = require("cmp_nvim_lsp")

		local keymap = vim.keymap

		vim.api.nvim_create_autocmd("LspAttach", {
			group = vim.api.nvim_create_augroup("UserLspConfig", {}),
			callback = function(ev)
				-- Buffer local mappings
				-- See `:help vim.lsp.*` for documentation on any of the below functions
				local opts = { buffer = ev.buf, silent = true }
				keymap.set("n", "K", vim.lsp.buf.hover, opts)
				keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)
				keymap.set("n", "<leader>lf", vim.lsp.buf.declaration, opts)
				keymap.set("n", "<leader>gd", vim.lsp.buf.definition, opts)
				keymap.set("n", "<leader>gi", vim.lsp.buf.implementation, opts)
				keymap.set("n", "<leader>gr", vim.lsp.buf.references, opts)
				keymap.set("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, opts)
				keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, opts)
				-- keymap.set("n", "<leader>?", vim.lsp.diagnostic.open_float, opts)
				keymap.set("n", "<leader>wl", function()
					print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
				end, opts)
				keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, opts)
				keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
				keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)
				-- keymap.set("n", "<Leader>f", function()
				-- 	lsp.buf.format({ async = true })
				-- end, opts)

				-- if client.name == "tsserver" then
				-- 	keymap.set("n", "<leader>rf", ":TypescriptRenameFile<CR>", opts)
				-- 	keymap.set("n", "<leader>gs", "<cmd>TSLspOrganize<CR>", opts)
				-- 	keymap.set("n", "<leader>gi", "<cmd>TSLspImportAll<CR>", opts)
				-- end

				-- This was generated by Copilot. Have a look and maybe uncomment one of those
				-- buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
				-- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
				-- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
				-- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
				-- buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
				-- buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
				-- buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
				-- buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
				-- buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
			end,
		})

		local capabilities = cmp_nvim_lsp.default_capabilities()

		mason_lspconfig.setup_handlers({
			-- default handler
			function(server_name)
				lspconfig[server_name].setup({
					capabilities = capabilities,
				})
			end,
			["lua_ls"] = function()
				lspconfig.lua_ls.setup({
					capabilities = capabilities,
					settings = {
						Lua = {
							diagnostics = {
								globals = { "vim" },
							},
							completion = {
								callSnippet = "Replace",
							},
						},
					},
				})
			end,
			["elixirls"] = function()
				lspconfig.elixirls.setup({
					capabilities = capabilities,
					cmd = { "elixir-ls" },
				})
			end,
			["nextls"] = function()
				lspconfig.nextls.setup({
					capabilities = capabilities,
					cmd = { "nextls" },
				})
			end,
		})
	end,
}
