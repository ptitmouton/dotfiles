-- local lspconfig_setup, lspconfig = pcall(require, 'lspconfig')
-- if not lspconfig_setup then
--   return
-- end
-- 
-- local typescript_setup, typescript = pcall(require, 'typescript')
-- if not typescript_setup then
--   return
-- end

require('mason').setup {
  -- your configuration comes here
  -- or leave it empty to use the default settings
  -- refer to the configuration section below
}

require('mason-lspconfig').setup {
  ensure_installed = {
    	'clangd',
      'bashls',
      'clangd',
      'cmake',
      'cssls',
      'cssmodules_ls',
      'dockerls',
      'gopls',
      'graphql',
      'html',
      'jdtls',
      'jsonls',
      'lua_ls',
      'prismals',
      'remark_ls',
      'rust_analyzer',
      'spectral',
      'sqls',
      'stylelint_lsp',
      'tailwindcss',
      'tflint',
      'tsserver',
      'vuels',
      'yamlls',
      'asm_lsp',
      'vimls',
  }
}

-- enable keybinds for available lsp servers
local on_attach = function(client, bufnr)
  local opts = { noremap = true, silent = true, buffer = bufnr }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
  vim.keymap.set('n', '<leader>lf', vim.lsp.buf.declaration, opts)
  vim.keymap.set('n', '<leader>gd', vim.lsp.buf.definition, opts)
  vim.keymap.set('n', '<leader>gi', vim.lsp.buf.implementation, opts)
  vim.keymap.set('n', '<leader>gr', vim.lsp.buf.references, opts)
  vim.keymap.set('n', '<leader>wa', vim.lsp.buf.add_workspace_folder, opts)
  vim.keymap.set('n', '<leader>wr', vim.lsp.buf.remove_workspace_folder, opts)
  vim.keymap.set('n', '<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, opts)
  vim.keymap.set('n', '<leader>D', vim.lsp.buf.type_definition, opts)
  vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, opts)
  vim.keymap.set( 'n', '<leader>ca', vim.lsp.buf.code_action, opts)
  vim.keymap.set('n', '<space>f', function()
    vim.lsp.buf.format { async = true }
  end, opts)
  vim.keymap.set('n', '<Leader>f', function() vim.lsp.buf.format { async = true } end, opts)

  if client.name == 'tsserver' then
    vim.keymap.set('n', '<leader>rf', ':TypescriptRenameFile<CR>', opts)
    vim.keymap.set('n', '<leader>gs', '<cmd>TSLspOrganize<CR>', opts)
    vim.keymap.set('n', '<leader>gi', '<cmd>TSLspImportAll<CR>', opts)
  end

  -- This was generated by Copilot. Have a look and maybe uncomment one of those
  -- buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  -- buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  -- buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  -- buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  -- buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  -- buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  -- buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
end

local capabilities = require('cmp_nvim_lsp').default_capabilities()

require('lspconfig').lua_ls.setup{
    settings = {
        Lua = {
            diagnostics = {
                globals = {'vim'},
            },
        },
    },
    on_attach = on_attach,
    capabilities = capabilities
}
require('lspconfig').bashls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').elixirls.setup{
    -- Mac
    cmd = { "/opt/homebrew/bin/elixir-ls" },
    on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').clangd.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').cmake.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').cssls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').cssmodules_ls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').dockerls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').gopls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').graphql.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').html.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').jdtls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').jsonls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').prismals.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').remark_ls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').rust_analyzer.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').spectral.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').sqls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').stylelint_lsp.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').tailwindcss.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').tflint.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').tsserver.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').vuels.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').yamlls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').asm_lsp.setup{
  on_attach = on_attach,
  capabilities = capabilities
}
require('lspconfig').vimls.setup{
  on_attach = on_attach,
  capabilities = capabilities
}


